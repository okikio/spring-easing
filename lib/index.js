(function(t,l){typeof exports=="object"&&typeof module<"u"?l(exports):typeof define=="function"&&define.amd?define(["exports"],l):(t=typeof globalThis<"u"?globalThis:t||self,l(t.SpringEasing={}))})(this,function(t){"use strict";function l(e){const n=parseFloat(e);return typeof n=="number"&&!Number.isNaN(n)}function p(e,n,i){return Math.min(Math.max(e,n),i)}function O(e,n,i){return n+(i-n)*e}function b(e,n){return Math.round(e*10**n)/10**n}function I(e){const n=parseFloat(e);return e.toString().replace(n.toString(),"")}function U(e){return function(n,i,r){return n.map(s=>e(s,i,r))}}const f=(e,[n=1,i=100,r=10,s=0]=[],a)=>{if(e===0||e===1)return e;n=p(n,.1,1e3),i=p(i,.1,1e3),r=p(r,.1,1e3),s=p(s,.1,1e3);const o=Math.sqrt(i/n),u=r/(2*Math.sqrt(i*n)),c=u<1?o*Math.sqrt(1-u*u):0,g=1,F=u<1?(u*o+-s)/c:-s+o;let m=a?a*e/1e3:e;return u<1?m=Math.exp(-m*u*o)*(g*Math.cos(c*m)+F*Math.sin(c*m)):m=(g+F*m)*Math.exp(-m*o),1-m},E=new Map,M=1e5;function N([e,n,i,r]=[]){let s=[e,n,i,r],a=`${s}`;if(E.has(a))return E.get(a);const o=1/6;let u=0,c=0,g=0;for(;++g<M;)if(u+=o,f(u,s,null)===1){if(c++,c>=16)break}else c=0;const F=u*o*1e3;return E.set(a,F),F}function w(e){return(n,i=[],r)=>1-e(1-n,i,r)}function k(e){return function(n,i=[],r){return n<.5?e(n*2,i,r)/2:1-e(n*-2+2,i,r)/2}}function T(e){return function(n,i=[],r){return n<.5?(1-e(1-n*2,i,r))/2:(e(n*2-1,i,r)+1)/2}}const L=f,P=w(f),j=k(f),A=T(f);function d(e,n,i=3){const r=n.length-1,s=p(Math.floor(e*r),0,r-1),a=n[s],o=n[s+1],u=(e-s/r)*r;return b(O(u,a,o),i)}function y(e,n){const i=n.length-1;e=p(e,0,1);const r=Math.round(e*i);return n[r]}const K=y;function C(e,n,i=3){let r="";return l(n[0])&&(r=I(n[0])),d(e,n.map(s=>typeof s=="number"?s:parseFloat(s)),i)+r}function q(e,n,i=3){return n.every(a=>typeof a=="number")?d(e,n,i):n.every(a=>l(a))?C(e,n,i):y(e,n)}t.EasingFunctions={spring:f,"spring-in":L,"spring-out":P,"spring-in-out":j,"spring-out-in":A},t.EasingFunctionKeys=Object.keys(t.EasingFunctions);function G(e,n){t.EasingFunctions={...t.EasingFunctions,[e]:n},t.EasingFunctionKeys=Object.keys(t.EasingFunctions)}function z(e){t.EasingFunctions={...t.EasingFunctions,...e},t.EasingFunctionKeys=Object.keys(t.EasingFunctions)}function _(e){const n=/(\(|\s)([^)]+)\)?/.exec(e.toString());return n?n[2].split(",").map(i=>{let r=parseFloat(i);return Number.isNaN(r)?i.trim():r}):[]}function S(e={}){const n=typeof e=="string"||Array.isArray(e)&&typeof e[0]=="function";let{easing:i=[f,1,100,10,0],numPoints:r=100,decimal:s=3}=n?{easing:e}:e;if(typeof i=="string"){const a=t.EasingFunctions[i.replace(/(\(|\s).+/,"").toLowerCase().trim()],o=_(i);i=[a,...o]}return{easing:i,numPoints:r,decimal:s}}const h=new Map;function $(e={}){let{easing:n,numPoints:i}=S(e);if(Array.isArray(n)){if(typeof n[0]!="function")throw new Error("[spring-easing] A frame function is required as the first element in the easing array, e.g. [SpringFrame, ...]");n.length>1&&n.length<5&&console.warn(`[spring-easing] Be careful of only setting some of the spring parameters, you've only set ${5-n.length} spring parameter(s). The easing works best in the format: 
* "spring-out(mass, stiffness, damping, velocity)" or 
* [SpringOutFrame, mass, stiffness, damping, velocity].`),n.length>5&&console.warn(`[spring-easing] You entered ${5-n.length} more spring parameter(s) than necessary. The easing needs to be in the format: 
* "spring-out(mass, stiffness, damping, velocity)" or 
* [SpringOutFrame, mass, stiffness, damping, velocity].`)}else throw new Error(`[spring-easing] The easing needs to be in the format:  
* "spring-out(mass, stiffness, damping, velocity)" or 
* [SpringOutFrame, mass, stiffness, damping, velocity], the easing recieved is "${n}", [spring-easing] doesn't really know what to do with that.`);let[r,...s]=n;const a=`${s},${i}`;if(h.has(a)){let g=h.get(a);if(g.has(r))return g.get(r)}const o=[],u=N(s);for(let g=0;g<i;g++)o[g]=r(g/(i-1),s,u);const c=h.has(a)?h.get(a):new WeakMap;return c.set(r,[o,u]),h.set(a,c),[o,u]}function D(e,n={},i=q){const r=S(n),[s,a]=$(r);return[s.map(o=>i(o,e,r.decimal)),a]}t.EaseInOut=k,t.EaseOut=w,t.EaseOutIn=T,t.EasingDurationCache=E,t.EasingOptions=S,t.FramePtsCache=h,t.GenerateSpringFrames=$,t.INFINITE_LOOP_LIMIT=M,t.SpringEasing=D,t.SpringFrame=f,t.SpringInFrame=L,t.SpringInOutFrame=j,t.SpringOutFrame=P,t.SpringOutInFrame=A,t.default=D,t.getSpringDuration=N,t.getUnit=I,t.interpolateComplex=q,t.interpolateNumber=d,t.interpolateSequence=y,t.interpolateString=C,t.interpolateUsingIndex=K,t.isNumberLike=l,t.limit=p,t.parseEasingParameters=_,t.registerEasingFunction=G,t.registerEasingFunctions=z,t.scale=O,t.toAnimationFrames=U,t.toFixed=b,Object.defineProperties(t,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});
